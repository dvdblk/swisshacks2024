import os
import gradio as gr
import pandas as pd
import requests

API_URL = "http://localhost:8000/upload_audio"

# Function to validate audio using CSV data
def validate_audio(file_path):
    try:
        # Read the CSV file
        data = pd.read_csv(file_path)
    except Exception as e:
        return "Error", "Error", "Error", "Error", f"Error reading CSV file: {str(e)}"

    # Extract the audio file name without the directory path
    file_name = os.path.basename(file_path).rstrip('.wav')

    # Find the row in the CSV that matches the audio file name (rec_id)
    row = data[data['rec_id'] == file_name]

    if row.empty:
        return "Unknown", "Unknown", "Unknown", "Unknown", "No transcript available"
    
    # Extract the necessary information from the row
    try:
        is_fake = row['is_fake'].values[0]  # Get the value of 'is_fake' column
        is_factually_correct = row['is_factually_correct'].values[0]  # Get the value of 'is_factually_correct' column
        is_impersonator = row['is_impersonator'].values[0]  # Get the value of 'is_impersonator' column
        fake_info_text = row['fake_info_text'].values[0]  # Get the value of 'fake_info_text' column
        transcript = row['transcript'].values[0]  # Get the value of 'transcript' column
    except Exception as e:
        return "Error", "Error", "Error", "Error", f"Error processing CSV data: {str(e)}"
    
    # Convert the values to appropriate text
    audio_type = "Real" if not is_fake else "Fake"
    factual_correctness = "Yes" if is_factually_correct else "No"
    speaker_verification = "Impersonator" if is_impersonator else "Real Person"
    
    return audio_type, factual_correctness, speaker_verification, fake_info_text, transcript

# Function to send a message to Discord
def send_discord_message(content):
    webhook_url = os.getenv("DISCORD_WEBHOOK_URL")  # Use environment variable for the webhook URL
    if not webhook_url:
        return "Discord webhook URL not set."

    data = {
        "content": content
    }
    response = requests.post(webhook_url, json=data)
    if response.status_code == 204:
        return "Message sent to Discord successfully!"
    else:
        return f"Failed to send message to Discord. Error: {response.status_code} {response.text}"

# Ensure the 'data' directory exists
if not os.path.exists('data'):
    os.makedirs('data')

# Gradio functions
def process_audio(file_path):
    # Validate audio
    audio_type, factual_correctness, speaker_verification, fake_info, transcript = validate_audio(file_path)
    return audio_type, factual_correctness, speaker_verification, fake_info, transcript

def send_report_discord(file_path, custom_message):
    audio_type, factual_correctness, speaker_verification, fake_info, transcript = process_audio(file_path)
    
    predefined_message = f"Fake Information: {fake_info}\n\nAudio Type: {audio_type}\nFactual Correctness: {factual_correctness}\nSpeaker Verification: {speaker_verification}\n"
    message_body = predefined_message + custom_message
    result = send_discord_message(message_body)
    discord_status = result
    
    return discord_status

def clear_results():
    return (
        gr.update(value=None), gr.update(value=""), gr.update(value=""),
        gr.update(value=""), gr.update(value=""), gr.update(value=""),
        gr.update(value=""), gr.update(value=""), gr.update(value="")
    )

def upload_csv_via_api(file_path):
    with open(file_path, 'rb') as f:
        response = requests.post(API_URL, files={'file': f})
    if response.status_code == 200:
        return response.json()["path"]
    else:
        return None

# Gradio interface

# Custom CSS
css = """
body, .gradio-container, .gr-text-input, .gr-textbox, .gr-button, .gr-dropdown {
    color: #00008b !important;
    font-family: 'VerlagOffice-Regular', sans-serif !important;
}
h1, h2, h3, h4, h5, h6, .gradio-container p {
    color: #00008b !important;
    font-family: 'VerlagOffice-Regular', sans-serif !important;
}
.gr-button {
    border: 2px solid #00008b !important;
    color: #00008b !important;
    background: transparent !important;
    font-family: 'VerlagOffice-Regular', sans-serif !important;
    padding: 10px 20px !important;
    border-radius: 5px !important;
    text-transform: uppercase !important;
    font-size: 16px !important;
}
.gr-button:hover {
    background: #00008b !important;
    color: #ffffff !important;
}
.audio-input-container .gradio-container {
    height: 50px !important;
}
"""

with gr.Blocks(css=css) as interface:
    gr.Markdown("# Audio Verification App")

    with gr.Row():
        audio_input = gr.Audio(type="filepath", label="Upload an audio file", elem_id="audio-input-container")
        csv_input = gr.File(type="file", label="Upload CSV Data File")
    
    with gr.Row():
        process_button = gr.Button("Process Audio")

    with gr.Row():
        gr.Markdown("## Results")

    with gr.Row():
        transcript_output = gr.Textbox(label="Transcript", elem_id="transcript_box")

    with gr.Row():
        audio_type_output = gr.Textbox(label="Audio Type", elem_id="results_box")
        factual_correctness_output = gr.Textbox(label="Factual Correctness", elem_id="results_box")
        speaker_verification_output = gr.Textbox(label="Speaker Verification", elem_id="results_box")
        fake_info_output = gr.Textbox(label="Fake Information Found", elem_id="results_box")

    with gr.Row():
        gr.Markdown("## Report Suspicious Audio")

    with gr.Row():
        custom_message_input = gr.Textbox(lines=2, label="Add Additional Information in Report", elem_id="custom_message_box")

    with gr.Row():
        send_discord_button = gr.Button("Send Report")
    
    with gr.Row():  
        discord_status_output = gr.Textbox(label="Status")
        clear_button = gr.Button("Clear")

    def process_and_upload(file_path, csv_file):
        uploaded_csv_path = upload_csv_via_api(csv_file.name)
        if uploaded_csv_path:
            return process_audio(file_path)
        else:
            return "Error", "Error", "Error", "Error", "Error uploading CSV file"

    process_button.click(
        process_and_upload,
        inputs=[audio_input, csv_input],
        outputs=[
            audio_type_output, factual_correctness_output,
            speaker_verification_output, fake_info_output, transcript_output
        ]
    )

    send_discord_button.click(
        send_report_discord,
        inputs=[audio_input, custom_message_input],
        outputs=[discord_status_output]
    )

    clear_button.click(
        clear_results,
        inputs=[],
        outputs=[
            audio_input, audio_type_output, factual_correctness_output,
            speaker_verification_output, fake_info_output,
            custom_message_input, discord_status_output, transcript_output
        ]
    )

# Additional CSS for custom message box and results box size
extra_css = """
#custom_message_box .gr-textbox {
    width: calc(100% - 20px) !important;
    height: 100px !important;
}
#results_box .gr-textbox {
    width: 25% !important;
    display: inline-block !important;
}
#transcript_box .gr-textbox {
    width: calc(100% - 20px) !important;
}
"""

interface.css += extra_css

if __name__ == "__main__":
    interface.launch()
